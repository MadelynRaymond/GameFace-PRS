// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id    Int    @id @default(autoincrement())
  email String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  password Password?
  profile StudentProfile?
  reports AthleteReport[]
  resetToken Token?
}

model StudentProfile {
  //change to enum
  grade String
  firstName String
  lastName String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int  @unique
}

model Password {
  hash String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int  @unique
}

model ExerciseCategory {
  id Int @id @default(autoincrement())
  name String @unique
  drills Drill[]
}

model Drill {
  id Int @id @default(autoincrement())
  name String
  category ExerciseCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId Int
  entries DrillEntry[]
  
  @@unique([categoryId, name])
}

model AthleteReport {
  id Int @id @default(autoincrement())
  created_at DateTime @default(now())
  user  User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  entries DrillEntry[]
  userId Int
}

model DrillEntry {
  id Int @id @default(autoincrement())
  created_at DateTime @default(now())
  drill Drill @relation(fields: [drillId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  report AthleteReport @relation(fields: [reportId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  score Score?
  reportId Int
  drillId Int
}

model Score {
  score Int?
  outOf Int?
  bestScore Int?
  time String?
  bestTime String
  //change to enum
  unit String
  entry DrillEntry @relation(fields: [entry_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  entry_id Int @unique
}

model Token {
  userEmail String @unique
  user User @relation(fields: [userEmail], references: [email], onDelete: Cascade, onUpdate: Cascade)
  token String
  @@unique([userEmail, token])
}

